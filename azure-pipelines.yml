# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  azureSubscription: 'ARM_acrtest'
  azSub: 'sub_az104 (fedfcc1a-136f-4ac1-b088-2b832c4b7767)'
  appName: 'ducknetazp'
  containerRegistry: 'acrreg34.azurecr.io'
  dockerRegistryServiceConnection: '9ad23b76-a67a-489f-ac31-f7963b4f5fb5'
  imageRepository: 'sachshdocknetazp'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: AzureCLI@2
      displayName: 'Azure CLI'
      inputs:
        azureSubscription: $(azSub)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Hello, Azure CLI!"
          echo "Container Registry: $(containerRegistry)"
          echo "Image Repository: $(imageRepository)"
          echo "Dockerfile Path: $(dockerfilePath)"
          echo "Tag: $(tag)"
        workingDirectory: '$(Build.SourcesDirectory)'
        failOnStandardError: true

    - task: AzureKeyVault@2
      displayName: 'Azure Key Vault'
      inputs:
        azureSubscription: $(azureSubscription)
        KeyVaultName: 'acrvault32432'
        SecretsFilter: '*'
        RunAsPreJob: true

- stage: Deploy
  displayName: 'Deploy the container'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    pool:
      vmImage: $(vmImageName)
    variables:
    - group: Release
    steps:
    - task: AzureWebAppContainer@1
      displayName: 'Azure Web App on Container Deploy'
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        containers: '$(containerRegistry)/$(imageRepository):$(tag)'
        isLinuxApp: true
